<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medicine Search with OpenFDA</title>
    <!-- TensorFlow.js and MobileNet for AI -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@2.1.0"></script>
    <!-- Tesseract.js for OCR (text recognition) -->
    <script src="https://unpkg.com/tesseract.js@4.0.2/dist/tesseract.min.js"></script>
    <style>
        /* General Styles */
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: url('https://images.unsplash.com/photo-1576091160550-2173dba999ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80') no-repeat center center fixed;
            background-size: cover;
            margin: 0;
            padding: 0;
            color: #333;
        }

        .container {
            max-width: 700px;
            margin: 60px auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(5px);
            transition: transform 0.3s ease;
        }

        .container:hover {
            transform: translateY(-5px);
        }

        h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 20px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        /* Search Bar */
        .search-bar {
            display: flex;
            align-items: center;
            gap: 15px;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        input[type="text"] {
            padding: 12px 15px;
            width: 60%;
            font-size: 1.1em;
            border: none;
            border-radius: 8px;
            background: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            outline: none;
            transition: box-shadow 0.3s ease;
        }

        input[type="text"]:focus {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

        button {
            padding: 12px 25px;
            font-size: 1.1em;
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            background: linear-gradient(135deg, #2980b9, #1e6fa6);
        }

        /* Camera Container */
        #cameraContainer {
            margin-top: 25px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        #video {
            border-radius: 10px;
            border: 2px solid #3498db;
        }

        /* Result Section */
        #result {
            margin-top: 25px;
            padding: 20px;
            background: #f1f3f5;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        #medicineName {
            color: #e74c3c;
            font-size: 1.8em;
            margin-bottom: 15px;
            text-transform: capitalize;
        }

        p {
            margin: 10px 0;
            font-size: 1.1em;
            line-height: 1.5;
        }

        strong {
            color: #2c3e50;
            font-weight: 600;
        }

        /* Additional UI Enhancements */
        .glass-effect {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .container {
                margin: 20px;
                padding: 20px;
            }

            .search-bar {
                flex-direction: column;
                gap: 10px;
            }

            input[type="text"] {
                width: 100%;
            }

            button {
                width: 100%;
            }

            #video {
                width: 100%;
                height: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Medicine Search</h1>
        <div class="search-bar">
            <input type="text" id="medicineInput" placeholder="Enter medicine name...">
            <button onclick="searchMedicine()">Search</button>
            <button onclick="startCamera()">Scan Medicine</button>
        </div>
        <div id="cameraContainer" style="display: none;">
            <video id="video" width="300" height="200" autoplay></video>
            <canvas id="canvas" style="display: none;"></canvas>
            <button onclick="stopCamera()">Stop Camera</button>
        </div>
        <div id="result">
            <h2 id="medicineName"></h2>
            <p><strong>Uses:</strong> <span id="uses"></span></p>
            <p><strong>Side Effects:</strong> <span id="sideEffects"></span></p>
        </div>
    </div>

    <script>
        let video = null;
        let stream = null;
        let model = null;
        let scanning = false;

        // Replace with your OpenFDA API key (already included from your code)
        const API_KEY = "tsujfeTPzbH61hJzmWrKU4cYB6GnId7p3go20dZ1";

        // Load the MobileNet model on page load
        async function loadModel() {
            model = await mobilenet.load();
            console.log("MobileNet model loaded");
        }

        loadModel();

        function displayResult(medicineName, uses, sideEffects) {
            const medicineNameElement = document.getElementById("medicineName");
            const usesElement = document.getElementById("uses");
            const sideEffectsElement = document.getElementById("sideEffects");

            medicineNameElement.textContent = medicineName.charAt(0).toUpperCase() + medicineName.slice(1);
            usesElement.textContent = uses || "No usage information available.";
            sideEffectsElement.textContent = sideEffects || "No side effects information available.";
        }

        // Fetch medicine details from OpenFDA API
        async function fetchMedicineDetails(medicineName) {
            try {
                const response = await fetch(
                    `https://api.fda.gov/drug/label.json?api_key=${API_KEY}&search=openfda.brand_name:${medicineName}+openfda.generic_name:${medicineName}&limit=1`
                );
                const data = await response.json();
                if (data.results && data.results[0]) {
                    const result = data.results[0];
                    return {
                        uses: result.indications_and_usage?.[0] || "Usage info not found.",
                        sideEffects: result.adverse_reactions?.[0] || "Side effects not found."
                    };
                } else {
                    return {
                        uses: "No matching medicine found in FDA database.",
                        sideEffects: "No side effects available."
                    };
                }
            } catch (error) {
                console.error("Error fetching from OpenFDA:", error);
                return {
                    uses: "Error retrieving data.",
                    sideEffects: "Error retrieving data."
                };
            }
        }

        async function searchMedicine() {
            const input = document.getElementById("medicineInput").value.trim().toLowerCase();
            if (!input) {
                alert("Please enter a medicine name.");
                return;
            }
            const details = await fetchMedicineDetails(input);
            displayResult(input, details.uses, details.sideEffects);
        }

        async function startCamera() {
            video = document.getElementById("video");
            const canvasElement = document.getElementById("canvas");
            const canvas = canvasElement.getContext("2d");
            const cameraContainer = document.getElementById("cameraContainer");

            cameraContainer.style.display = "block";

            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } });
                video.srcObject = stream;
                video.play();

                canvasElement.width = video.videoWidth;
                canvasElement.height = video.videoHeight;

                scanning = true;
                scanFrame();
            } catch (err) {
                alert("Error accessing camera: " + err.message);
                cameraContainer.style.display = "none";
            }
        }

        async function scanFrame() {
            if (!scanning || !video || !model) return;

            const canvasElement = document.getElementById("canvas");
            const canvas = canvasElement.getContext("2d");

            canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);

            // Use Tesseract for text recognition (OCR) to detect medicine names
            Tesseract.recognize(
                canvasElement,
                'eng',
                { logger: m => console.log(m) }
            ).then(async ({ data: { text } }) => {
                const lowerText = text.toLowerCase().trim();
                if (lowerText) {
                    const medicineName = lowerText.split(/\s+/)[0];
                    if (medicineName.length > 3) {
                        const details = await fetchMedicineDetails(medicineName);
                        displayResult(medicineName, details.uses, details.sideEffects);
                        stopCamera();
                        return;
                    }
                }
            });

            // Fallback: Use MobileNet for object detection
            const image = tf.browser.fromPixels(canvasElement);
            const predictions = await model.classify(image);
            for (let pred of predictions) {
                const label = pred.className.toLowerCase();
                if (label.includes("pill") || label.includes("bottle") || label.includes("medicine")) {
                    const medicineName = label.split(",")[0];
                    const details = await fetchMedicineDetails(medicineName);
                    displayResult(medicineName, details.uses, details.sideEffects);
                    stopCamera();
                    return;
                }
            }

            requestAnimationFrame(scanFrame);
        }

        function stopCamera() {
            scanning = false;
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            document.getElementById("cameraContainer").style.display = "none";
        }
    </script>
</body>
</html>
